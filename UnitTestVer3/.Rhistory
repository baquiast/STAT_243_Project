a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = log(f(x.vec))
if(class(df)=="function") {d.vec=df(x.vec)/f.vec} else {d.vec = grad(f,x.vec)/f.vec}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = log(f(x.cand))
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(log(f(x.seq[i]))-log(f(x.seq[i-1])) > log(f(x.seq[i-1]))-log(f(x.seq[i-2]))) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = log(f(x.vec))
if(class(df)=="function") {d.vec=df(x.vec)/f.vec} else {d.vec = grad(f,x.vec)/f.vec}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = log(f(x.cand))
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
hist(test.sample)
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
library(numDeriv)
# f convexity check
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(f(x.seq[i])-f(x.seq[i-1]) > f(x.seq[i-1])-f(x.seq[i-2])) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = f(x.vec)
if(class(df)=="function") {d.vec=df(x.vec)} else {d.vec = grad(f,x.vec)}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = f(x.cand)
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
test.sample = ars(n,f,df)
test.sample = ars(n,f,df,x.start=c(-2,0,2))
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
hist(test.sample)
library(numDeriv)
# f convexity check
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(f(x.seq[i])-f(x.seq[i-1]) > f(x.seq[i-1])-f(x.seq[i-2])) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = f(x.vec)
if(class(df)=="function") {d.vec=df(x.vec)} else {d.vec = grad(f,x.vec)}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = f(x.cand)
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {-(1/2)*(x)^2}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
test.sample = ars(n,f,df)
test.sample = ars(n,f,df,x.start=c(-2,0,2))
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
hist(test.sample)
test.sample
hist(exp(test.sample))
library(RUnit)
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo = function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {}
foo <- function(x) {
x <- x*x
x <- 2*x
return(x)
}
test.foo <- function() {    checkTrue(is.numeric(foo(1:10)))    checkEquals(length(foo(1:10)), 10)    checkEqualsNumeric(foo(1), 2) }
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
mv ~/.rstudio-desktop ~/rstudio-desktop.old
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
getwd()
sewd('/Users/Luna/Desktop/UnitTestVer3')
setwd('/Users/Luna/Desktop/UnitTestVer3')
library('RUnit')
source('codeVer22.R')
test.suite <- defineTestSuite("sub functions",
dirs = file.path("tests"),
testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('codeVer22.R')
test.suite <- defineTestSuite("sub functions",
dirs = file.path("tests"),
testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
source('codeVer22.R')
test.suite <- defineTestSuite("sub functions",
dirs = file.path("tests"),
testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
gen.start = function(x.start,domain,h,fprima,hprima) {
# When user gives starting values
if(length(x.start)!=0) {
# Check if there is at least two unique starting values
if(length(unique(x.start))<2){
stop("At least two unique starting values are required")
}
# Check if starting values are unique
#if(length(unique(x.start))!=length(x.start)){
#  stop("The starting values are not unique")
#}
# Check if starting values are inside the domain
if((sort(domain)[1] > min(x.start)) | (max(x.start) > sort(domain)[2])){
stop("The starting values are outside the domain")
}
# Check if starting values are differentiable
if(sum(is.na(grad(h,x.start)))!=0){
stop("The starting values are not differentiable")
}
x.start = sort(x.start)
}else{
# When user does not give starting values
if(length(domain)!=2 | length(unique(domain))!=2){
# Invalid domain
stop("Invalid domain")
}else{
if(domain[1]>domain[2]){
domain = c(domain[2],domain[1])
}
if(domain[1]==-Inf){
domain[1] = -15
}
if(domain[2]==Inf){
domain[2] = 15
}
# Create starting values from domain
p1 = seq(0.1,0,l=10)
p2 = seq(10,0,l=10)
p.vec1 = cumsum(exp(p1)/sum(exp(p1)))
p.vec2 = cumsum(exp(p2)/sum(exp(p2)))
p.vec = unique(sort(c(p.vec1,p.vec2,0.5*p.vec1,0.5*p.vec2)))
p.vec = c(p.vec,1-p.vec)
p.vec = p.vec[p.vec!=0 & p.vec!=1]
x.start = domain
# Did not vectorize it because it has only two loops
for(i in 1:2) {
x.temp1 = rep(NULL,length(p.vec))
if(h(x.start[i])==Inf){
x.temp1 = domain[i]-((-1)^(i))*min(1e-2,(domain[2]-domain[1]))*p.vec
x.temp1 = x.temp1[abs(h(x.temp1))!=Inf]
x.start[i] = x.temp1[!is.na(grad(h,x.temp1))][1]
}
else if(h(x.start[i])==-Inf){
x.temp1 = domain[i] - ((-1)^(i))*(domain[2]-domain[1])*p.vec
x.temp1 = x.temp1[abs(h(x.temp1))!=Inf]
x.start[i] = x.temp1[!is.na(grad(h,x.temp1))][1]
}
else {
if(!is.na(grad(h,x.start[i]))){
x.start[i] = x.start[i]
}else{
x.temp1 = domain[i]-((-1)^(i))*min(1e-2,(domain[2]-domain[1]))*p.vec
x.start[i] = x.temp1[!is.na(grad(h,x.temp1))][1]
}
}
}
x.mod = optimize(h,interval=x.start,maximum=TRUE)$maximum
x.diff = abs(x.start - x.mod)
if((x.diff[1]/x.diff[2]) > 1e5 | (x.diff[2]/x.diff[1]) > 1e5) {
A=optimize(h,interval=x.start,maximum=TRUE)$objective
B=optimize(h,interval=x.start,maximum=FALSE)$objective
k = function(x){h(x) - (A-(A-B)*0.5)}
x.start1 = x.start[which.max(x.diff)]
x.start[which.max(x.diff)] = uniroot(k,interval=c(x.mod,x.start1))$root
}
}
}
return(x.start)
}
x.start=c()
domain=c(-Inf,Inf)
f=function(x) {log(dnorm(x,0,1))}
gen.start(x.start,domain,f)
f=function(x) {log(dexp(x,1))}
domain=c(0,10)
gen.start(x.start,domain,f)
domain=c(-1,1)
gen.start(x.start,domain,f)
domain=c(0,Inf)
gen.start(x.start,domain,f)
f=function(x) {log(dchisq(x,2))}
domain=c(0,10)
gen.start(x.start,domain,f)
domain=c(0,Inf)
gen.start(x.start,domain,f)
library('RUnit')
source('codeVer22.R')
test.suite <- defineTestSuite("sub functions",
dirs = file.path("tests"),
testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
domain=c(-1,1)
gen.start(x.start,domain,f)
f=function(x) {log(dnorm(x,0,1))}
gen.start(x.start,domain,f)
library('RUnit')
source('codeVer22.R')
test.suite <- defineTestSuite("sub functions",
dirs = file.path("tests"),
testFileRegexp = '^\\d+\\.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
