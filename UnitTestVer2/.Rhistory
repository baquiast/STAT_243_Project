f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = log(f(x.vec))
if(class(df)=="function") {d.vec=df(x.vec)/f.vec} else {d.vec = grad(f,x.vec)/f.vec}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = log(f(x.cand))
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(log(f(x.seq[i]))-log(f(x.seq[i-1])) > log(f(x.seq[i-1]))-log(f(x.seq[i-2]))) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = log(f(x.vec))
if(class(df)=="function") {d.vec=df(x.vec)/f.vec} else {d.vec = grad(f,x.vec)/f.vec}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = log(f(x.cand))
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(log(f(x.seq[i]))-log(f(x.seq[i-1])) > log(f(x.seq[i-1]))-log(f(x.seq[i-2]))) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = log(f(x.vec))
if(class(df)=="function") {d.vec=df(x.vec)/f.vec} else {d.vec = grad(f,x.vec)/f.vec}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = log(f(x.cand))
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
hist(test.sample)
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
library(numDeriv)
# f convexity check
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(f(x.seq[i])-f(x.seq[i-1]) > f(x.seq[i-1])-f(x.seq[i-2])) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = f(x.vec)
if(class(df)=="function") {d.vec=df(x.vec)} else {d.vec = grad(f,x.vec)}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = f(x.cand)
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {exp(-(1/2)*(x)^2)}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
test.sample = ars(n,f,df)
test.sample = ars(n,f,df,x.start=c(-2,0,2))
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
hist(test.sample)
library(numDeriv)
# f convexity check
is.convex = function(f,x.start){
x.seq <- seq(x.start[1],x.start[3], l=100)
for (i in 3:100){
if(f(x.seq[i])-f(x.seq[i-1]) > f(x.seq[i-1])-f(x.seq[i-2])) stop("Error: The distribution is not log concave!")
}
}
# Evaluate lower bound at x
lower = function(x, x.vec, f.vec){
l = max(which(x>x.vec))
return(f(x.vec[l])+(x-x.vec[l])*((f.vec[l+1]-f.vec[l])/(x.vec[l+1]-x.vec[l])))
}
# Evaluate upper bound at x
upper = function(x, x.vec, f.vec, d.vec){
l = max(which(x>x.vec))
return(min(f.vec[l]+(x-x.vec[l])*d.vec[l],f.vec[l+1]+(x-x.vec[l+1])*d.vec[l+1]))
}
# Plot of the acceptance region and bounds
boundary.plot = function(x.vec,f.vec,d.vec,x.temp,x.start,with.f = F, f=F){
# Create upper bound
nvec = length(x.vec)
x.center = rep(NA,nvec-1)
f.center = x.center
for (i in 1:(nvec-1)){
a=sapply(x.temp, function(x){
f.vec[i]+(x-x.vec[i])*d.vec[i]>(f.vec[i+1]+(x-x.vec[i+1])*d.vec[i+1])})
x.center[i] = x.temp[which(diff(a)!=0)]
f.center[i] = f.vec[i]+(x.center[i]-x.vec[i])*d.vec[i]
}
x.corners = c(x.vec[1],x.center,x.vec[nvec])
f.corners = c(f.vec[1],f.center,f.vec[nvec])
# Plot
if(with.f==T){
plot(f, xlim=c(x.start[1],x.start[3]), lwd =1)
polygon(c(x.corners,x.vec[1]),c(f.corners,f.vec[1]),col="firebrick")
polygon(c(x.temp,x.vec[1]),c(f(x.temp),f.vec[1]),col="palegreen4")
lines(x.corners,f.corners, lwd=1)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red")
}
lines(x.vec,f.vec, lwd =1)
}
###################
## Main function ##
###################
ars = function(n, f, df=NA, x.start=c(-4,1,4), plot.type = "none"){
set.seed(200)
is.convex(f,x.start)
x.out=rep(NA,n)
x.vec = x.start
f.vec = f(x.vec)
if(class(df)=="function") {d.vec=df(x.vec)} else {d.vec = grad(f,x.vec)}
dx = 1e-2
x.temp = seq(x.vec[1]+dx,x.vec[3]-dx,2*dx)
i = 1
while(i<=n){
u = runif(1,0,1)
x.cand = sample(x.temp[!x.temp %in% x.out],size=1,prob=sapply(x.temp[!x.temp %in% x.out], function(x){
exp(upper(x,x.vec,f.vec,d.vec))}))
x.cand = runif(1,x.cand-dx,x.cand+dx)
if(u <= exp(lower(x.cand,x.vec,f.vec)-upper(x.cand,x.vec,f.vec,d.vec))) {
x.out[i] = x.cand
i=i+1
}else{
f.cand = f(x.cand)
if(u <= exp(f.cand-upper(x.cand,x.vec,f.vec,d.vec))){
x.out[i] = x.cand
i = i+1
}
l = max(which(x.cand>x.vec))
x.vec = append(x.vec,x.cand,after=l)
f.vec = append(f.vec,f.cand,after=l)
if(class(df)=="function") {d.vec = append(d.vec,df(x.cand),after=l)} else {d.vec = append(d.vec,grad(f,x.cand),after=l)}
}
}
if(plot.type == "bounds"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=F)
}
if(plot.type == "acceptance"){
boundary.plot(x.vec,f.vec,d.vec, x.temp, x.start,with.f=T, f)
}
return(x.out)
}
##########
## test ##
##########
# User input
n = 100
f = function(x) {-(1/2)*(x)^2}
df = function(x) {-x}
# Draw a sample using ars()
test.sample = ars(n,f)
test.sample = ars(n,f,df)
test.sample = ars(n,f,df,x.start=c(-2,0,2))
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="bounds")
test.sample = ars(n,f,df,x.start=c(-2,0,2),plot.type="acceptance")
hist(test.sample)
test.sample
hist(exp(test.sample))
library(RUnit)
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo = function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {}
foo <- function(x) {
x <- x*x
x <- 2*x
return(x)
}
test.foo <- function() {    checkTrue(is.numeric(foo(1:10)))    checkEquals(length(foo(1:10)), 10)    checkEqualsNumeric(foo(1), 2) }
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
mv ~/.rstudio-desktop ~/rstudio-desktop.old
foo <- function(x) {  x <- x*x  x <- 2*x  return(x)}
boundary.plot = function(x.vec,f.vec,d.vec, f=FALSE){
# Create upper bound
nvec = length(x.vec)
x.vals = seq(x.vec[1],x.vec[nvec],l=100)
x.mat = cbind(x.vec[1:(nvec-1)],x.vec[2:nvec])
f.mat = cbind(f.vec[1:(nvec-1)],f.vec[2:nvec])
d.mat = cbind(d.vec[1:(nvec-1)],d.vec[2:nvec])
x.center = (f.mat[,2]-f.mat[,1]-x.mat[,2]*d.mat[,2]+x.mat[,1]*d.mat[,1])/(d.mat[,1]-d.mat[,2])
f.center = f.mat[,1] + d.mat[,1]*(x.center-x.mat[,1])
xf.corners = cbind(c(x.center,x.vec),c(f.center,f.vec))
xf.corners = xf.corners[order(xf.corners[,1]),]
x.corners = xf.corners[,1]
f.corners = xf.corners[,2]
# Plot
if(is.function(f)){
plot(f, xlim=c(x.vec[1],x.vec[nvec]), lwd =1, yaxt='n', ylab='', xlab="x",
main ="Acceptance region and rejection of the log density",
cex.lab = 1.4)
polygon(x.corners,f.corners,
col="firebrick", border="firebrick")
polygon(c(x.vals,x.vec[nvec],x.vec[1]),c(f(x.vals),min(f.vec),min(f.vec)),
col="palegreen4",border="palegreen4") # acceptance region
lines(x.corners,f.corners, lwd=1, col="firebrick")
lines(x.vec,f.vec, lwd =1, col="grey10") # lower bound
legend(x="topright", legend=c("Acceptance region", "Rejection region",
"Lower bound"),col=c("palegreen4","firebrick","grey10"),
pch=c(15,15,NA),lty=c(0,0,1), seg.len = 0.5, cex = 0.6)
} else{
plot(x.corners,f.corners, type = "l",lty =1, lwd=1, col="red", xlab="x",
yaxt='n', ylab='', main = "Upper and lower bound of the log density",
cex.lab = 1.4)
lines(x.vec,f.vec, lwd =1,col="black") # lower bound
legend(x="topright",legend=c("Upper bound", "Lower bound"),
col=c("black","red"), lty=c(1,1), cex = 0.6)
}
}
x.vec <- c(-4,-1.091335,0,1.548574,4)
f.vec <- c(8.9189385,-1.5144445,-0.9189385,-2.1179792,-8.9189385)
d.vec <- c(4,1.091335,0,-1.548574,-4)
boundary.plot(x.vec,f.vec,d.vec)
x.vec <- c(-4,-1.091335,0,1.548574,4)
f.vec <- c(-8.9189385,-1.5144445,-0.9189385,-2.1179792,-8.9189385)
d.vec <- c(4,1.091335,0,-1.548574,-4)
boundary.plot(x.vec,f.vec,d.vec)
